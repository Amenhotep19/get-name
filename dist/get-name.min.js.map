{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","get-name.min.js","src/get-name.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","getName","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","getFunctionName","fn","displayName","name","match","functionNameRe","exec","toString","obj","type","slice","toLowerCase","constructor","Object","defineProperty","value"],"mappings":";CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,QAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,GCEA,YCWA,SAAS0B,GAAgBC,GAGrB,GAAIA,EAAGC,YACH,MAAOD,GAAGC,WAEd,IAAID,EAAGE,KACH,MAAOF,GAAGE,IAEd,IAAMC,GAAQC,EAAeC,KAAKL,EAAGM,WACrC,OAAIH,IAASA,EAAM,GACRA,EAAM,GAEV,GAUI,QAASrB,GAAQyB,GAC5B,GAAMC,GAAOF,EAASV,KAAKW,GAAKE,MAAM,KACtC,QAAQD,GACJ,IAAK,OACL,IAAK,YACD,MAAOA,GAAKE,aAChB,KAAK,WACD,MAAOX,GAAgBQ,EAC3B,SACI,MAAOR,GAAgBQ,EAAII,cDzCvCC,OAAOC,eAAexC,EAAS,cAC3ByC,OAAO,IAEXzC,EAAAA,WC6BwBS,CAjCxB,IAAMwB,MAAcA,SACdF,EAAiB,sBDoDvB9B,GAAOD,QAAUA,EAAQ,qBAEd,IAAI","file":"get-name.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! get-name v0.1.0 | https://github.com/ryanmorr/get-name */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.getName = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = getName;\n/**\r\n * Common variables\r\n */\nvar toString = {}.toString;\nvar functionNameRe = /function ([^\\(]+)?\\(/;\n\n/**\r\n * Get the name of a function\r\n *\r\n * @param {Function} fn\r\n * @return {String}\r\n * @api private\r\n */\nfunction getFunctionName(fn) {\n    // Support the non-standard `displayName`\n    // property if it exists\n    if (fn.displayName) {\n        return fn.displayName;\n    }\n    if (fn.name) {\n        return fn.name;\n    }\n    var match = functionNameRe.exec(fn.toString());\n    if (match && match[1]) {\n        return match[1];\n    }\n    return '';\n}\n\n/**\r\n * Get the name of an object\r\n *\r\n * @param {*} obj\r\n * @return {String}\r\n * @api public\r\n */\nfunction getName(obj) {\n    var type = toString.call(obj).slice(8, -1);\n    switch (type) {\n        case 'Null':\n        case 'Undefined':\n            return type.toLowerCase();\n        case 'Function':\n            return getFunctionName(obj);\n        default:\n            return getFunctionName(obj.constructor);\n    }\n}\nmodule.exports = exports['default'];\n\n},{}]},{},[1])(1)\n});\n\n","/**\r\n * Common variables\r\n */\r\nconst toString = {}.toString;\r\nconst functionNameRe = /function ([^\\(]+)?\\(/;\r\n\r\n/**\r\n * Get the name of a function\r\n *\r\n * @param {Function} fn\r\n * @return {String}\r\n * @api private\r\n */\r\nfunction getFunctionName(fn) {\r\n    // Support the non-standard `displayName`\r\n    // property if it exists\r\n    if (fn.displayName) {\r\n        return fn.displayName;\r\n    }\r\n    if (fn.name) {\r\n        return fn.name;\r\n    }\r\n    const match = functionNameRe.exec(fn.toString());\r\n    if (match && match[1]) {\r\n        return match[1];\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * Get the name of an object\r\n *\r\n * @param {*} obj\r\n * @return {String}\r\n * @api public\r\n */\r\nexport default function getName(obj) {\r\n    const type = toString.call(obj).slice(8, -1);\r\n    switch (type) {\r\n        case 'Null':\r\n        case 'Undefined':\r\n            return type.toLowerCase();\r\n        case 'Function':\r\n            return getFunctionName(obj);\r\n        default:\r\n            return getFunctionName(obj.constructor);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}